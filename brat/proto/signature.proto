syntax = "proto3";
package tierkreis.signature;
import "graph.proto";

message FunctionDeclaration {
  string name = 1;
  tierkreis.graph.TypeScheme type_scheme = 2;
  string description = 3;
  repeated string input_order = 4;
  repeated string output_order = 5;
}

message ListFunctionsRequest {
}

message ListFunctionsResponse {
  map<string, FunctionDeclaration> functions = 1;
  map<string, tierkreis.graph.TypeScheme> aliases = 2;
}

service Signature {
  rpc ListFunctions (ListFunctionsRequest) returns (ListFunctionsResponse) {};
}

service TypeInference {
  rpc InferType (InferTypeRequest) returns (InferTypeResponse) {};
}

message InferTypeRequest {
  tierkreis.graph.Value value = 1;
}

message InferTypeResponse {
  oneof response {
    InferTypeSuccess success = 1;
    TypeErrors error = 2;
  }
}

message InferTypeSuccess {
  tierkreis.graph.Value value = 1;
  tierkreis.graph.TypeScheme type_scheme = 2;
}

message TypeErrors {
  repeated TierkreisTypeError errors = 1;
}

message TierkreisTypeError {
  string msg = 1;
  repeated string location = 2;
}
