open import lib.kernel (CX)

fanout(Vec(Nat, 3)) -> Nat, Nat, Nat
fanout = { [/\] }

swap(X :: $, Y :: $) -> { X, Y -o Y, X }
swap(_, _) = { x, y => y, x }

test(Vec(Qubit, 2)) -o Vec(Qubit, 2)
test = { [/\]; CX; [\/] }

as_fn :: Vec(Nat, 3)
as_fn = [\/](fanout([1,2,3]))

swap_vec(Vec(Qubit, 2)) -o Vec(Qubit, 2)
swap_vec(qs) = [\/](swap(Qubit, Qubit)([/\](qs)))

pack_mid(Nat, Nat, Nat, Nat) -> Nat, Vec(Nat, 2), Nat
pack_mid = { (x=>x), [\/], .. }

ext "" f :: { Vec(Qubit, 2) -o Bit }

g(Qubit, Qubit) -o Bit
g = [\/]; f

poly(X :: *) -> { Vec(X, 3) -> X, X, X }
poly(_) = { [/\] }

poly2(X :: $) -> { X, X, X -o Vec(X, 3) }
poly2(_) = { [\/] }
