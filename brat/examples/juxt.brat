-- Expectation: This file parses and typechecks

I :: { Qubit -o Qubit }
I = { q => q }

I' :: { Qubit -o Qubit }
I' = { I }

I2 :: { Qubit, Qubit -o Qubit, Qubit }
I2 = { I, I }

I4 :: { Qubit, Qubit -o Qubit, Qubit }
I4 = { I, (x => x)}

-- And much the same for classical functions
id(Nat) -> Nat
id = x => x

id2(x :: Nat, y :: Nat) -> (x :: Nat), (y :: Nat)
id2 = { id,id }

id3(Nat, Nat) -> Nat, Nat
id3 = x, y => (id,id)(x, y)

id4 :: { Nat, Nat -> Nat, Nat }
id4 = { id, (x => x)}

asym(Nat, Nat, Nat) -> Nat, Nat, Nat
asym = { id,id2 }

sandwich :: { Nat, Nat, Nat, Nat -> Nat, Nat, Nat, Nat }
sandwich = { id,id2,id }

natToBool(Nat) -> Bool
natToBool(0) = false
natToBool(n) = true

boolToNat(Bool) -> Nat
boolToNat(true) = 1
boolToNat(false) = 0

notId :: { Nat, Bool -> Bool, Nat }
notId = { natToBool, boolToNat}
