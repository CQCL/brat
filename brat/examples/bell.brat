import lib.kernel

type A = Bool
type B = Nat
type C = Bool

Rx(Float) -> { Qubit -o Qubit }
Rx(th) = lib.kernel.Rx(th)

H :: { Qubit -o Qubit }
H = lib.kernel.H

M2 :: { Qubit, Qubit -o Bit, Bit }
M2 = { lib.kernel.M, lib.kernel.M }

id(A) -> A
id = a => a

id2(A, B) -> A, B
id2 = a, b => a, b

thId :: (fn :: {A -> A})
thId = { x => id(x) }

f'(A) -> B
f' = ?f'

g'(B) -> C
g' = ?g'

fg(A) -> C
fg = ?fg


id'(f :: {A -> A}, A) -> A
id' = f, a => f(a)

id''(A) -> A
id''(x) = id((id)(x))

copyNat(Nat) -> Nat, Nat
copyNat(x) = x, x

add(Nat, Nat) -> Nat
add(0, y) = y
add(succ(x), y) = add(1, add(x, y))

double(Nat) -> Nat
double(x) = add(copyNat(x))

-- test :: {A -> A}
-- test = id;?help

compTest({ A -> B }, { B -> C}) -> { A -> C }
compTest(f, g) = { x => g(f(x)) }

justMeasure :: { c :: Qubit, d :: Qubit -o c :: Bit, d :: Bit }
justMeasure = { c, d => M2(c, d) }

idq :: { Qubit -o Qubit }
idq = { q => q }

phasedBell :: { (th :: Float) -> { c :: Qubit, d :: Qubit -o c :: Bit, d :: Bit } }
phasedBell(th) = {
  H,idq;
  Rz(th),idq;
  M,M
}
