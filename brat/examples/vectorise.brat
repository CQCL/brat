replicate(X :: *, n :: #, X) -> Vec(X, n)
replicate(_, n, x) = n of x

map(X :: *, Y :: *, { X -> Y }, n :: #, Vec(X, n)) -> Vec(Y, n)
map(_, _, f, n, xs) = (n of f)(xs)

map'(X :: *, Y :: *, { X -> Y }, n :: #, Vec(X, n)) -> Vec(Y, n)
map'(_, _, f, n, xs) = xs |> n of f

mapKernel(X :: $, Y :: $, { X -o Y }, n :: #) -> { Vec(X, n) -o Vec(Y, n) }
mapKernel(_, _, f, n) = { n of f }

zip(X :: *, Y :: *, n :: #, Vec(X, n), Vec(Y, n)) -> Vec([X, Y], n)
zip(X, Y, n, xs, ys) =
 xs, ys |>
 (n of ({[_,_]} :: { X, Y -> [X,Y] }))

mkPair(X :: *, Y :: *) -> { X, Y -> [X, Y] }
mkPair(_, _) = { x, y => [x,y] }

zip2(X :: *, Y :: *, n :: #, Vec(X, n), Vec(Y, n)) -> Vec([X, Y], n)
zip2(X, Y, n, xs, ys) =
 xs, ys |>
 n of mkPair(X, Y)

rank2(X :: *, Y :: *, Z :: *,
      n :: #, m :: #,
      Vec(Vec(X, n), m), Vec(Vec(Y, n), m),
      { X, Y -> Z }) -> Vec(Vec(Z, n), m)
--rank2(_, _, _, n, m, fstArgs, sndArgs, f) = fstArgs, sndArgs |> m of n of f
rank2(_, _, _, n, m, fstArgs, sndArgs, f) = (m of n of f)(fstArgs, sndArgs)

f(X :: *, n :: #, Vec(X, n)) -> Vec(X, 2 * n)
f(X, 0, []) = []
f(X, succ(n), x ,- xs) = x ,- x ,- f(X, n, xs)

withTypeArgs(X :: *, n :: #, m :: #, Vec(Vec(X, n), m)) -> Vec(Vec(X, 2 * n), m)
withTypeArgs(X, n, m, xss) = X, n, xss |> m of f

leftovers(n :: #, Vec(Nat, succ(n))) -> Vec(Nat, n), Vec(Nat, succ(n))
leftovers(n, xs) = (n of 3), xs

diffLengths(n :: #) -> Vec(Nat, n), Vec(Nat, succ(n))
diffLengths(n) = (n of 3), (succ(n) of 4)

g(Vec(Nat, 43)) -> Vec(Nat, 42), Vec(Nat, 43)
g(xs) = (42 of 3), xs

constLenNoun :: Vec(Nat, 2)
constLenNoun = 2 of 42
