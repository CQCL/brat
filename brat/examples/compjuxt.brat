ext "" f :: { Nat -> Int }
ext "" g :: { Int -> Nat }
ext "" idi :: { Int -> Int }
ext "" idn(Nat) -> Nat
ext "" addn(Nat, Nat) -> Nat

id2 :: { Nat, Nat -> Nat, Nat }
id2 = { f,f; g,g }

-- Same function, but without curly braces
id2'(Nat, Nat) -> Nat, Nat
id2' = f,f; g,g

-- Compose forced juxtapositions of nouns
id2a :: { Nat, Int -> Nat, Int }
id2a = { (f,g); g,f }

id2b :: { Nat, Int -> Nat, Int }
id2b = { f,g; (g,f) }

id2c :: { Nat, Int -> Nat, Int }
id2c = { (f,g); (g,f) }

-- Note brackets here; without them, would be parsed as (idi(), f()); (g(), idn())
mixture :: { Int, Nat, Nat -> Int, Nat, Nat }
mixture = { idi, (f; g), idn }


swap :: { a :: Nat, b :: Nat -> b :: Nat, a :: Nat }
swap = { x, y => a:id2(x, y) }
swap' :: { a :: Nat, b :: Nat -> b :: Nat, a :: Nat }
swap' = x, y => a:id2(x, y)

funky_application :: { a :: Nat, b :: Nat -> Nat }
funky_application = { x, y => x, y |> addn }
funky_application' :: { a :: Nat, b :: Nat -> Nat }
funky_application' = x, y => x, y |> addn


int :: { -> Int }
int = { => idi(1) }
int' :: Int
int' = idi(1)

port_pull(Nat) -> n :: Nat, i :: Int
port_pull = { x => i:(x, x |> f, idn) }
port_pull' :: { Nat -> nat :: Nat, int :: Int }
port_pull' = x => int:(x, x |> f, idn)


addi(Int, Int) -> Nat
addi = { g, g; addn }


juxt_in_comp2 :: { Nat, Nat, Int -> Int, Nat, Int}
juxt_in_comp2 = { f,f,idi ; idi,g,idi }

sverb_cverb :: { Int -> Nat }
sverb_cverb = { idi; (z => 4) }

sverb_sverb_cverb :: { Int -> Nat }
sverb_sverb_cverb = { idi; idi; (z => 4) }

num_lit :: { -> Nat, Nat }
num_lit = { => (1, 2) |> id2 }

into_in_lambda :: { Nat -> Nat }
into_in_lambda = { x => (1, x) |> addn }
