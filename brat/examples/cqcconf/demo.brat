type Unit = Vec Nat 0
type A = Nat
type B = Bool

# , b :: Bool, A :: Type, B :: Type -> Type
which :: Bool, Type, Type -> Type
which true, a, b = a
which false, a, b = b

if :: Bool, { Unit -> A }, { Unit -> A } -> A
if true, then, else = then([])
if false, then, else = else([])

nums :: Vec Nat 4
nums = [1,2,3,4]

unpack_array :: Vec Nat 4 -> Nat, Nat, Nat, Nat
unpack_array [a,b,c,d] = a,b,c,d

add :: Nat, Nat -> Nat
add 0, y = y
add (1+ x), y = (1+ add(x,y))

main :: Nat
main = add((add,add)(unpack_array(nums)))

ext H :: { Qubit -o Qubit }
ext cnot :: { ctrl :: Qubit, tgt :: Qubit -o ctrl :: Qubit, tgt :: Qubit}
ext measure :: { Qubit -o Bit}

qid :: { Qubit -o Qubit }
qid = { q -> q }

main2 :: { Qubit, Qubit -o Bit, Bit }
main2 = { q0, q1 -> (measure,measure)(cnot((H,id)(q0,q1))) }

# main26 :: Nat -> Nat
# main26 n = (id;id())(n)

# main3 :: { Qubit, Qubit -o Bit, Bit }
# main3 = (id,id);(measure,measure)()
