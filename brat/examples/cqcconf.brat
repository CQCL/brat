import lib.kernel

which(Bool, A :: *, B :: *) -> (out :: *)
which(true, a, b) = a
which(false, a, b) = b

if(Bool, { [] -> Nat }, { [] -> Nat }) -> Nat
if(true,  then, else) = then([])
if(false, then, else) = else([])

vec :: Vec(Nat, 4)
vec = [0,1,2,3]

unpack_vec(Vec(Nat, 4)) -> Nat, Nat, Nat, Nat
unpack_vec([a,b,c,d]) = a,b,c,d

add(x :: Nat, y :: Nat) -> (z :: Nat)
add(0, y) = y
add(succ(x), y) = succ(add(x,y))

main :: (value :: Nat)
main = add((add,add)(unpack_vec(vec)))

main2 :: { Qubit, Qubit -o Bit, Bit }
main2 =
 lib.kernel.H,|;
 lib.kernel.CZ;
 lib.kernel.M,lib.kernel.M
