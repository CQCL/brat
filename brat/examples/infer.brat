map(X :: *, Y :: *, { X -> Y }, List(X)) -> List(Y)
map(_, _, _, []) = []
map(_, _, f, x ,- xs) = f(x) ,- map(!, !, f, xs)

mapVec(X :: *, Y :: *, { X -> Y }, n :: #, Vec(X, n)) -> Vec(Y, n)
mapVec(_, _, _, _, []) = []
mapVec(_, _, f, _, x ,- xs) = f(x) ,- mapVec(!, !, f, !, xs)

isfull(n :: #) -> Bool
isfull(succ(doub(n))) = isfull(n)
isfull(0) = true
isfull(_) = false

hasfulllen(n :: #, Vec(Bool, n)) -> Bool
hasfulllen(n, x ,- (xs =,= ys)) = hasfulllen(xs)
hasfulllen(_, []) = true
hasfulllen(_, _) = false

eatsfull(n :: #, xs :: Vec(Bool, full(n))) -> Nat
eatsfull(n, _) = n
mkftwo :: Nat
mkftwo = eatsfull(!, [false,false,false]) 

eatsodd(n :: #, xs :: Vec(Bool, succ(doub(n)))) -> Nat
eatsodd(n, _) = n
mkotwo' :: Nat
mkotwo' = eatsodd(2, [false,false,false,false,false]) 
mkotwo :: Nat
mkotwo = eatsodd(!, [false,false,false,false,false])
