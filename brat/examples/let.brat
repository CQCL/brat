xs :: List(Int)
xs = [0,1,2]

xs' :: List(Int)
xs' = let ys = xs in ys

unsafeHead :: { List(Int) -> Int }
unsafeHead(xs) = let cons(x, xs) = xs in x

unpair([Int,Bool]) -> Int, Bool
unpair(p) = let [a, b] = p in a, b

-- f :: List(Int) -> List(Int)
--(f = let xs) = ([0,1] :: List(Int)) in xs

triple :: {Int -> Int, Int, Int }
triple(z) = let x, y = z, z in x, y, z

inc(Int) -> Int
inc(n) = succ(n)

inc2(Int) -> Int
inc2(x) = let y = x in succ(y)

ext "" map({Int -> Int}, List(Int)) -> List(Int)

nums :: List(Int)
nums = let xs = map(inc, xs) in xs

nums' :: List(Int)
nums' = let xs = map(inc, [0,2,3]) in xs

nums'' :: List(Int)
nums'' = let i2 = {inc; inc} in map(i2, xs)

dyad :: Int, Bool
dyad = 42, true

bind2 :: Bool
bind2 = let i, b = dyad in b

-- It shouldn't matter if we put brackets in the binding sites
bind2' :: Bool
bind2' = let (i, b) = dyad in b
