import lib.kernel

-- Helper functions we're going to use --
measure2 :: { q0::Qubit, q1::Qubit -o b0::Bit, b1::Bit, m0::Money, m1::Money }
measure2 = { let m, b, m', b' = (lib.kernel.measure,lib.kernel.measure)(_,_)
             in b, b', m, m' }


qondX(Bit, Qubit) -o Qubit
qondX(true, q) = lib.kernel.X(q)
qondX(false, q) = q

qondZ(Bit, Qubit) -o Qubit
qondZ(true, q) = lib.kernel.Z(q)
qondZ(false, q) = q

packCash :: { Money, Money -o Vec(Money, 2) }
packCash(m, m') = [m, m']
-----------------------------------------

bell00 :: { Qubit, Qubit -o Qubit, Qubit }
bell00 = {
 lib.kernel.H, |;
 lib.kernel.CX
}

alice'(Qubit, Qubit) -o Bit, Bit, Money, Money
alice'(a, q) = let (a, q) = lib.kernel.CX(a, q) in
               let q = lib.kernel.H(q) in
               measure2(a, q)

-- A more "Braty" version of the above function
alice :: { Qubit, Qubit -o Bit, Bit, Vec(Money, 2) }
alice = {
 lib.kernel.CX;
 |, lib.kernel.H;
 measure2;
 |,|,packCash
}

bob :: { Qubit, x :: Bit, y :: Bit -o Qubit }
bob(q, x, y) =
 let q = qondX(x,q) in
 let q = qondZ(y,q) in
 q

tele(Qubit, Qubit, Qubit) -o Qubit, Vec(Money, 2)
tele =
 |,bell00;
 alice, |;
 (x, y, ms, q => bob(q, x, y), ms)
