module Test.Circuit.Graph (graphTests) where

-- Module for checking that the graph generated by type checking is what we expect
import Brat.Error
import Brat.Graph
import Brat.Load
import Brat.Syntax.Core (Term)
import Test.Circuit.Common

import Control.Monad.Except
import Test.Tasty
import Test.Tasty.HUnit
import Test.Tasty.ExpectedFailure

graphTest name file graph = testCase name (runProg name file graph)

idFile = unlines
  ["main :: { a :: Qubit -o b :: Qubit }"
  ,"main = { q -> q }"
  ]

swapFile = unlines
  ["main :: { a :: Qubit, b :: Qubit -o b :: Qubit, a :: Qubit}"
  ,"main = { q0, q1 -> q1, q0 }"
  ]

xFile = unlines
  ["ext \"tket.X\" X :: { xa :: Qubit -o xb :: Qubit }"
  ,""
  ,"main :: { a :: Qubit -o b :: Qubit }"
  ,"main = { q -> X(q) }"
  ]

rxFile = unlines
  ["ext \"Rx\" Rx :: (th :: Float) -> { rxa :: Qubit -o rxb :: Qubit }"
  ,""
  ,"nums :: (x :: Int), (y :: Int), (z :: Int)"
  ,"nums = 1, 2 ,3"
  ,""
  ,"xish :: { rxa :: Qubit -o rxb :: Qubit }"
  ,"xish = Rx(30.0)"
  ,""
  ,"main :: { a :: Qubit -o b :: Qubit }"
  ,"main = { q -> xish(q) }"
  ]

two = unlines
  ["ext \"add\" add :: (a :: Int), (b :: Int) -> (c :: Int)"
  ,""
  ,"one :: (n :: Int)"
  ,"one = 1"
  ,""
  ,"two :: Int"
  ,"two = add(1, one)"
  ]

one = unlines
  ["one :: (n :: Int)"
  ,"one = 1"
  ]

addN = unlines
  ["ext \"N\" N :: (value :: Int)"
  ,"ext \"add\" add :: (a :: Int), (b :: Int) -> (c :: Int)"
  ,""
  ,"addN :: (in :: Int) -> (out :: Int)"
  ,"addN(n) = add(n, N)"
  ]

addN2 = unlines
  ["ext \"N\" N :: (value :: Int)"
  ,"ext \"add\" add :: (a :: Int), (b :: Int) -> (c :: Int)"
  ,""
  ,"addN :: (in :: Int) -> (out :: Int)"
  ,"addN(n) = add(n, N)"
  ,""
  ,"main :: Int"
  ,"main = addN(1)"
  ]

ext =
  "ext \"add\" add :: (a :: Int), (b :: Int) -> (c :: Int)"

comment = unlines
  ["# This is a test"
  ,""
  ,"# This too"
  ,""
  ]

graphTests = testGroup "Graph" [graphTest "id" idFile idGraph
                               ,graphTest "swap" swapFile swapGraph
                               ,graphTest "X"  xFile  xGraph
                               ,expectFail $ graphTest "Rx" rxFile rxGraph
                               ,graphTest "two" two   twoGraph
                               ,graphTest "one" one   oneGraph
                               ,graphTest "addN" addN addNGraph
                               ,expectFail $ graphTest "addN2" addN2 addN2Graph
                               ,graphTest "ext"  ext  extGraph
                               ,graphTest "empty" "" emptyGraph
                               ,graphTest "comment" comment emptyGraph
                               ]
