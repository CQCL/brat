module Test.Circuit.Graph (graphTests) where

-- Module for checking that the graph generated by type checking is what we expect
import Brat.Error
import Brat.Graph
import Brat.Load
import Brat.Syntax.Core (Term)
import Brat.Syntax.Common (Decl(..))
import Test.Circuit.Common

import Control.Monad.Except
import Test.Tasty
import Test.Tasty.HUnit
import Test.Tasty.ExpectedFailure

type Graph = Graph' Term

graphTest :: String -> String -> Graph' Term -> TestTree
graphTest name contents gExp = testCase name $ do
  env <- runExceptT $ loadFile Lib "" name contents
  case env of
    Left err -> assertFailure (show err)
    Right (_, _, _, _, _, gAct) -> gAct =? gExp

idFile =
  "main :: { a :: Qubit -o b :: Qubit }\
  \main = { q -> q }"

swapFile =
  "main :: { a :: Qubit, b :: Qubit -o b :: Qubit, a :: Qubit}\
  \main = { q0, q1 -> q1, q0 }"

xFile =
  "ext \"tket.X\" X :: { xa :: Qubit -o xb :: Qubit }\
  \\
  \main :: { a :: Qubit -o b :: Qubit }\
  \main = { q -> X(q) }"

rxFile =
  "ext \"Rx\" Rx :: (th :: Float) -> { rxa :: Qubit -o rxb :: Qubit }\
  \\
  \nums :: (x :: Int), (y :: Int), (z :: Int)\
  \nums = 1, 2 ,3\
  \\
  \xish :: { rxa :: Qubit -o rxb :: Qubit }\
  \xish = Rx(30.0)\
  \\
  \main :: { a :: Qubit -o b :: Qubit }\
  \main = { q -> xish(q) }"

-- TODO:
two =
  "ext \"add\" add :: (a :: Int), (b :: Int) -> (c :: Int)\
  \\
  \one :: (n :: Int)\
  \one = 1\
  \\
  \two :: Int\
  \two = add(1, one)"

one =
  "one :: (n :: Int)\
  \one = 1"

addN =
  "ext \"n\" N :: (value :: Int)\
  \ext \"add\" add :: (a :: Int), (b :: Int) -> (c :: Int)\
  \\
  \addN :: (in :: Int) -> (out :: Int)\
  \addN n = add(n, N)"

ext =
  "ext \"add\" add :: (a :: Int), (b :: Int) -> (c :: Int)"

graphTests = testGroup "Graph" [graphTest "id" idFile idGraph
                               ,graphTest "swap" swapFile swapGraph
                               ,graphTest "X"  xFile  xGraph
                               ,expectFail $ graphTest "Rx" rxFile rxGraph
                               ,graphTest "two" two   twoGraph
                               ,graphTest "one" one   oneGraph
                               ,expectFail $ graphTest "addN" addN addNGraph
                               ,graphTest "ext"  ext  extGraph
                               ]
